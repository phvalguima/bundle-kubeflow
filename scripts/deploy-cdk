#!/usr/bin/env python3

"""Deploys Kubeflow onto CDK."""

import argparse
import importlib
import json
import tempfile
import textwrap
import time
from glob import glob
from pathlib import Path

common = importlib.import_module('common', 'common.py')
run = common.run
require = common.require
get_output = common.get_output


# `juju add-k8s` uses a naming scheme in the form of `ec2/$REGION` instead
# of `aws/$REGION`.
K8S_CLOUD_NAMES = {'aws': 'ec2'}


def get_pub_addr(controller: str, model: str):
    status = json.loads(
        get_output('juju', 'status', '-m', f'{controller}:{model}', '--format=json')
    )
    pub_ip = status['applications']['kubernetes-worker']['units']['kubernetes-worker/0'][
        'public-address'
    ]

    return f'{pub_ip}.xip.io'


def parse_args():
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest='command', help='Subcommand to run')
    subparser.required = True
    create_args = subparser.add_parser('create')
    destroy_args = subparser.add_parser('destroy')
    info_args = subparser.add_parser('info')

    create_args.add_argument(
        '--controller', default='cdkkf', help='Controller containing CDK deployment to use'
    )
    create_args.add_argument(
        '--cdk-model', default='default', help='Juju model name of CDK deployment'
    )
    create_args.add_argument(
        '--model', default='kubeflow', help='Model name to use for Kubeflow bundle'
    )
    create_args.add_argument(
        '--channel', default='stable', help='Which channel to deploy Kubeflow bundle from'
    )
    create_args.add_argument(
        '--build', action='store_true', help='Whether or not to build charms in bundle locally'
    )
    create_args.add_argument(
        '--ci', action='store_true', help='Deploys bundle with bits appropriate for CI'
    )
    create_args.add_argument('--wait', default='900', help='How long to wait for charms to boot up')

    destroy_args.add_argument(
        '--controller', default='cdkkf', help='The controller in which to destroy the cloud'
    )

    destroy_args.add_argument('--cloud', default='cdkkf', help='The cloud to destroy')
    destroy_args.add_argument('--model', default='kubeflow', help='Name of model to destroy')
    destroy_args.add_argument(
        '--purge',
        action='store_true',
        default=False,
        help='Remove model for realz\nDestroys storage, cloud, and ignores any charm errors.',
    )
    info_args.add_argument('--controller', default='cdkkf', help='Juju controller name')
    info_args.add_argument('--cdk-model', default='default', help='Juju model name')

    return parser.parse_args()


def info(controller: str, model: str):
    pub_addr = get_pub_addr(controller, model)

    message = f"""
    Kubeflow is available via the central dashboard at http://{pub_addr}/.

    To tear down Kubeflow and associated infrastructure, run this command:

        ./scripts/deploy-cdk destroy

    For more information, see documentation at:

    https://github.com/juju-solutions/bundle-kubeflow/blob/master/README.md
    """

    print(textwrap.dedent(message))


def create(controller: str, cdk_model: str, model: str, channel: str, build: bool, ci: bool, wait: str):
    """Deploy Kubeflow to a CDK cluster."""

    require('juju', 'juju-wait', 'juju-kubectl:juju-helpers', 'juju-bundle:juju-helpers')

    # There's a semantic difference here, so to make the code below a
    # little more clear, this differentiates between the two. However,
    # having the cloud name be named the same as the controller is handy.
    cloud = controller

    start = time.time()

    deets = json.loads(get_output('juju', 'show-controller', controller, '--format=json'))

    region = deets[controller]['details']['region']

    try:
        cloud_name = K8S_CLOUD_NAMES[deets[controller]['details']['cloud']]
    except KeyError:
        raise Exception("Couldn't determine cloud name for `juju add-k8s`!")

    with tempfile.NamedTemporaryFile() as kubeconfig:
        # Copy details of cloud locally, and tell juju about it
        run('juju', 'scp', '-m', cdk_model, 'kubernetes-master/0:~/config', kubeconfig.name)
        run(
            'juju',
            'add-k8s',
            cloud,
            '-c',
            controller,
            f'--region={cloud_name}/{region}',
            '--storage',
            'juju-operator-storage',
            env={'KUBECONFIG': kubeconfig.name},
        )

    run('juju', 'add-model', model, cloud)

    # Set up some storage for the new cloud, deploy Kubeflow, and wait for
    # Kubeflow to boot up
    if cloud_name == 'ec2':
        run('juju', 'kubectl', 'apply', '-f', 'storage/aws-ebs.yml')
        run(
            'juju',
            'create-storage-pool',
            'k8s-ebs',
            'kubernetes',
            'storage-class=juju-ebs',
            'storage-provisioner=kubernetes.io/aws-ebs',
            'parameters.type=gp2',
        )
    else:
        raise Exception(f"Storage is required, but this script can't set up storage for `{cloud}`")

    # Allow building local bundle.yaml, otherwise deploy from the charm store
    if build:
        args = [
            'juju',
            'bundle',
            'deploy',
            '--build',
            '--',
            '--overlay',
            'overlays/cdk-kubeflow.yml',
        ]
        if ci:
            args += ['--overlay', 'overlays/ci.yml']
        run(*args)
    else:
        run('juju', 'deploy', 'kubeflow', '--channel', channel)

    run('juju', 'wait', '-e', f'{controller}:{model}', '-vwt', wait)

    # General Kubernetes setup.
    for f in glob('charms/*/resources/*.yaml'):
        run('juju', 'kubectl', 'apply', '-f', f)

    run(
        'juju',
        'kubectl',
        'patch',
        'sc',
        'juju-operator-storage',
        '-p',
        Path('storage/is-default.yml').read_text(),
        check=False,
    )

    pub_addr = get_pub_addr(controller, cdk_model)

    run('juju', 'config', 'ambassador', f'juju-external-hostname={pub_addr}')
    run('juju', 'expose', 'ambassador')

    end = time.time()

    print(f'\nCongratulations, Kubeflow is now available. Took {int(end - start)} seconds.')

    info(controller, cdk_model)


def destroy(controller: str, cloud: str, model: str, purge: bool):
    """Destroy given controller."""

    require('juju')

    args = ['juju', 'destroy-model', model]

    if purge:
        args += [f'--yes', '--destroy-storage', '--force']

    run(*args)

    if purge:
        run('juju', 'remove-cloud', '-c', controller, cloud)


if __name__ == '__main__':
    parsed = parse_args()

    if parsed.command == 'create':
        create(
            parsed.controller,
            parsed.cdk_model,
            parsed.model,
            parsed.channel,
            parsed.build,
            parsed.ci,
            parsed.wait,
        )
    elif parsed.command == 'destroy':
        destroy(parsed.cloud, parsed.cloud, parsed.model, parsed.purge)
    elif parsed.command == 'info':
        info(parsed.controller, parsed.cdk_model)
