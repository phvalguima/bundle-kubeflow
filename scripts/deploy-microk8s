#!/usr/bin/env python3

"""Deploys Kubeflow onto Microk8s"""

import argparse
import importlib
import json
import subprocess
import textwrap
import time
from glob import glob

common = importlib.import_module('common', 'common.py')
run = common.run
require = common.require
get_output = common.get_output


def parse_args():
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest='command', help='foo')
    subparser.required = True
    create_args = subparser.add_parser('create')
    destroy_args = subparser.add_parser('destroy')
    info_args = subparser.add_parser('info')

    create_args.add_argument('--cloud', default='microk8s', help='Juju cloud name')
    create_args.add_argument('--controller', default='uk8s', help='Juju controller name')
    create_args.add_argument('--model', default='kubeflow', help='Juju model name')
    create_args.add_argument('--channel', default='stable', help='Kubeflow bundle channel')
    create_args.add_argument(
        '--build', action='store_true', default=False, help='Build charms locally'
    )
    create_args.add_argument(
        '--ci',
        action='store_true',
        default=False,
        help='Deploy bundle with CI-specific modifications',
    )
    create_args.add_argument('--wait', default='900', help='How long to wait for charms to boot up')

    destroy_args.add_argument('--controller', default='uk8s', help='The controller to destroy')
    destroy_args.add_argument(
        '--purge',
        action='store_true',
        default=False,
        help='Destroy controller and all associated models, storage, etc.',
    )

    info_args.add_argument(
        '--controller', default='uk8s', help='The controller to display info for'
    )
    info_args.add_argument('--model', default='kubeflow', help='The model to display info for')

    return parser.parse_args()


def info(controller: str, model: str):
    status = json.loads(
        get_output('juju', 'status', '-m', f'{controller}:{model}', '--format', 'json')
    )
    pub_ip = status['applications']['ambassador']['units']['ambassador/0']['address']

    print(
        textwrap.dedent(
            f"""

    The central dashboard is available at http://{pub_ip}/

    Run `microk8s.kubectl proxy` to be able to access the dashboard at

    http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace={model}

    To tear down Kubeflow and associated infrastructure, run this command:

        ./scripts/deploy-microk8s destroy --controller {controller} --model {model}

    For more information, see documentation at:

    https://github.com/juju-solutions/bundle-kubeflow/blob/master/README.md

    """
        )
    )


def create(cloud: str, controller: str, model: str, channel: str, build: bool, ci: bool, wait: str):
    """Create CDK on given cloud."""

    require(
        'juju',
        'juju-wait',
        'juju-kubectl:juju-helpers',
        'juju-bundle:juju-helpers',
        'microk8s.enable:microk8s',
    )

    start = time.time()

    # Don't need dashboard in CI, and it also causes problems:
    # https://github.com/ubuntu/microk8s/issues/513
    if ci:
        microk8s_services = ['dns', 'storage']
    else:
        microk8s_services = ['dns', 'storage', 'dashboard']

    for service in microk8s_services:
        run('microk8s.enable', service)
        run('microk8s.status', '--wait-ready')

    print('Waiting for microk8s to be ready...')
    for i in range(5):
        try:
            subprocess.run(['microk8s.status', '--wait-ready', '--timeout', '60'], check=True)
        except subprocess.CalledProcessError:
            print('microk8s not yet ready.')
            time.sleep(12)
        else:
            break

    run('juju', 'bootstrap', cloud, controller)
    run('juju', 'add-model', model, cloud)

    # Allow building local bundle.yaml, otherwise deploy from the charm store
    if build:
        args = ['juju', 'bundle', 'deploy', '--build'] + (
            ['--', '--overlay', 'overlays/ci.yml'] if ci else []
        )
        run(*args)
    else:
        run('juju', 'deploy', 'kubeflow', '--channel', channel)

    run('juju', 'wait', '-vwt', wait)

    # General Kubernetes setup.
    for f in glob('charms/*/resources/*.yaml'):
        run('juju', 'kubectl', 'apply', '-f', f)

    run('juju', 'config', 'ambassador', 'juju-external-hostname=localhost')

    end = time.time()

    print(f'\nCongratulations, Kubeflow is now available. Took {int(end - start)} seconds.')

    info(controller, model)


def destroy(controller: str, purge: bool):
    """Destroy given controller."""

    require('juju')

    if purge:
        run(
            'juju',
            'destroy-controller',
            controller,
            '-y',
            '--destroy-all-models',
            '--destroy-storage',
        )
    else:
        run('juju', 'destroy-controller', controller)


if __name__ == '__main__':
    parsed = parse_args()

    if parsed.command == 'create':
        create(
            parsed.cloud, parsed.controller, parsed.model, parsed.channel, parsed.build, parsed.ci, parsed.wait
        )
    elif parsed.command == 'destroy':
        destroy(parsed.controller, parsed.purge)
    elif parsed.command == 'info':
        info(parsed.controller, parsed.model)
